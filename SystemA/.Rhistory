---
title: "Philippines Daedalus model"
date: "`r format(Sys.time(), '%d %B, %Y')`"
output:
bookdown::html_document2:
toc: true
toc_depth: 5
toc_float: true
number_sections: true
bookdown::word_document2: default
bookdown::pdf_document2: default
---
```{r setup, include=FALSE}
---
title: "Philippines Daedalus model"
date: "`r format(Sys.time(), '%d %B, %Y')`"
output:
bookdown::html_document2:
toc: true
toc_depth: 5
toc_float: true
number_sections: true
bookdown::word_document2: default
bookdown::pdf_document2: default
---
library(ggplot2)  #loading ggplot package for plotting graphs
library(ggplot2)  #loading ggplot package for plotting graphs
library(knitr)
library(tidyr)
library(dplyr)
library(xlsx)
library(xlsx)
library(kableExtra)
library(readxl)
library(lubridate)
library(plotly)
library(stringi)
library(pander)
library(gplots)
library(gplots)
library(RColorBrewer)
library(data.table)
library(bookdown)
library(gridExtra)
library(flextable)
# library(R.matlab)
#library(htmltools)
knitr::opts_chunk$set(comment=NA, prompt=FALSE, cache=FALSE, echo=F, results='asis')
options(knitr.kable.NA = '')
panderOptions('round',2)
doc.type <- knitr::opts_knit$get('rmarkdown.pandoc.to')
inputs_path <- '../matlab_inputs'
country_inputs_path <- '../country_data'
multi_country_inputs_path <- '../../data'
dae_path <- '../code/'
country <- 'Philippines'
country_abbr <- 'PHL'
readxlsx <- function(...) suppressMessages(read_xlsx(...))
epiwrap <- function(x){
out <- c()
for(i in 1:length(x)) out[i] <- ceiling(difftime(x[i],'2019-12-28',units='weeks')[[1]])
out
}
format_to_print <- function(x,z=-1){
formatC(round(x,z), format="f", digits=as.numeric(z>0), big.mark=",")
}
get_day_from_jan1 <- function(x){
out <- c()
for(i in 1:length(x)) out[i] <- ceiling(difftime(x[i],'2019-12-31',units='days')[[1]])
out
}
smooth_counts <- function(x,window=3){
y <- x
for(i in 1:length(x)){
ind <- max(1,i-window) : min(length(x),i+window)
y[i] <- mean(x[ind])
}
y
}
results <- read.csv(file.path(dae_path,'store/scenarios.csv'),stringsAs=F,header=F)
colnames(results) <- c('Measure','Baseline','Scenario 1','Scenario 2','Scenario 3','Scenario 4')
if (!knitr::is_html_output(excludes = "markdown")) {
results <- flextable(results)
results <- colformat_double(results,j=2,digits=1)
autofit(results)
} else {
kable(results, align='l',digits=c(1), format.args = list(big.mark = ","),caption='Outcomes for scenarios over six months. Shown are expected values and 90% interquantile range for 1,000 simulations with randomly drawn values for the transmission modifier.')%>%
kable_styling(full_width = F)
}
# two figs side by side
include_graphics(c("../code/store/scenario0.jpg"))
include_graphics(c("../code/store/scenario1.jpg"))
include_graphics(c("../code/store/scenario2.jpg"))
include_graphics(c("../code/store/scenario3.jpg"))
include_graphics(c("../code/store/scenario4.jpg"))
# two figs side by side
include_graphics(c("../code/store/scenario5samples.jpg"))
full_population <- read.csv(file.path(inputs_path,'population_by_age.csv'),stringsAs = F)
work_population <- read.csv(file.path(inputs_path,'population_by_sector.csv'),stringsAs = F)
nSectors <- nrow(work_population)-6
if(knitr::is_html_output(excludes = "markdown")){
plot_ly(x = factor(full_population$Age_group, levels = full_population[["Age_group"]]),
y = as.numeric(full_population$Population),name = "",type = "bar")%>%
config(displayModeBar = FALSE)%>%
layout(xaxis=list(tickangle=-45))
}else{
ggplot(full_population) + geom_bar(aes(x=factor(Age_group, levels = full_population[["Age_group"]]),
y = as.numeric(Population)),stat='identity')+
theme_bw(base_size=15) + labs(x='',y='Population size') +
theme(axis.text.x = element_text(angle = 45, hjust=01,vjust=1))
}
colnames(work_population) <- c('Group','Population')
work_population$Group[work_population$Group=='Inactive'] <- '20 to 64, economically inactive'
if (!knitr::is_html_output(excludes = "markdown")) {
wp <- work_population[nSectors+c(1:4,6),]
rownames(wp) <- 1:nrow(wp)
pander(wp,missing='', big.mark = ',')
} else {
kable(work_population[nSectors+c(1:4,6),], caption= '',row.names=F,align='l', format.args = list(big.mark = ","))%>%
kableExtra::kable_styling(full_width = FALSE)
# kable(full_population, caption= '',row.names=F,align='l')%>%
#   kableExtra::kable_styling(full_width = FALSE)
}
LE <- as.data.frame(read.csv(file.path(multi_country_inputs_path,'IHME-GBD_2019_DATA-fd4ac82f-1.csv'),stringsAs = F))
ylls <- read.csv(file.path(inputs_path,'yll.csv'))
four_pop <- work_population[nSectors+c(1,2,6,4),2]
average_yll <- sum(four_pop*ylls$yll)/sum(four_pop)
oldincomeusd <- 495
oldincome <- 25000
exchangerate <- 25000/oldincomeusd
vsl <- exchangerate*.75e6
vsl_per_income <- vsl/oldincome
newincome <- 45000
new_vsl <- newincome*vsl_per_income
dr <- 0.03
dyll <- (1-(1+dr)^(-ylls$yll[1]))/dr
average_dyll <- (1-(1+dr)^(-average_yll))/dr
dylls <- (1-(1+dr)^(-ylls$yll))/dr
vsly <- new_vsl/dyll
# https://law.vanderbilt.edu/phd/faculty/w-kip-viscusi/355_Income_Elasticities_and_Global_VSL.pdf
phl2017vsl <- 611000*1.07^5*52
phl2017vsly <- phl2017vsl/average_dyll
# http://dx.doi.org/10.1136/bmjgh-2019-001535
# The value of a statistical life with population-weighted means by World Health Organization region and World Bank income group.
wp2020vsl <- 991653*52
wp2020vsly <- wp2020vsl/average_dyll
library(ggplot2)  #loading ggplot package for plotting graphs
library(knitr)
library(tidyr)
library(dplyr)
library(xlsx)
library(kableExtra)
library(readxl)
library(lubridate)
library(plotly)
library(stringi)
library(pander)
library(gplots)
library(RColorBrewer)
library(data.table)
library(bookdown)
library(gridExtra)
library(flextable)
# library(R.matlab)
#library(htmltools)
knitr::opts_chunk$set(comment=NA, prompt=FALSE, cache=FALSE, echo=F, results='asis')
options(knitr.kable.NA = '')
panderOptions('round',2)
doc.type <- knitr::opts_knit$get('rmarkdown.pandoc.to')
inputs_path <- '../matlab_inputs'
country_inputs_path <- '../country_data'
multi_country_inputs_path <- '../../data'
dae_path <- '../code/'
country <- 'Philippines'
country_abbr <- 'PHL'
readxlsx <- function(...) suppressMessages(read_xlsx(...))
epiwrap <- function(x){
out <- c()
for(i in 1:length(x)) out[i] <- ceiling(difftime(x[i],'2019-12-28',units='weeks')[[1]])
out
}
format_to_print <- function(x,z=-1){
formatC(round(x,z), format="f", digits=as.numeric(z>0), big.mark=",")
}
get_day_from_jan1 <- function(x){
out <- c()
for(i in 1:length(x)) out[i] <- ceiling(difftime(x[i],'2019-12-31',units='days')[[1]])
out
}
smooth_counts <- function(x,window=3){
y <- x
for(i in 1:length(x)){
ind <- max(1,i-window) : min(length(x),i+window)
y[i] <- mean(x[ind])
}
y
}
# two figs side by side
include_graphics(c("../code/store/scenario0.jpg"))
include_graphics(c("../code/store/scenario1.jpg"))
include_graphics(c("../code/store/scenario2.jpg"))
include_graphics(c("../code/store/scenario3.jpg"))
include_graphics(c("../code/store/scenario4.jpg"))
# two figs side by side
include_graphics(c("../code/store/scenario5samples.jpg"))
full_population <- read.csv(file.path(inputs_path,'population_by_age.csv'),stringsAs = F)
work_population <- read.csv(file.path(inputs_path,'population_by_sector.csv'),stringsAs = F)
nSectors <- nrow(work_population)-6
if(knitr::is_html_output(excludes = "markdown")){
plot_ly(x = factor(full_population$Age_group, levels = full_population[["Age_group"]]),
y = as.numeric(full_population$Population),name = "",type = "bar")%>%
config(displayModeBar = FALSE)%>%
layout(xaxis=list(tickangle=-45))
}else{
ggplot(full_population) + geom_bar(aes(x=factor(Age_group, levels = full_population[["Age_group"]]),
y = as.numeric(Population)),stat='identity')+
theme_bw(base_size=15) + labs(x='',y='Population size') +
theme(axis.text.x = element_text(angle = 45, hjust=01,vjust=1))
}
colnames(work_population) <- c('Group','Population')
work_population$Group[work_population$Group=='Inactive'] <- '20 to 64, economically inactive'
if (!knitr::is_html_output(excludes = "markdown")) {
wp <- work_population[nSectors+c(1:4,6),]
rownames(wp) <- 1:nrow(wp)
pander(wp,missing='', big.mark = ',')
} else {
kable(work_population[nSectors+c(1:4,6),], caption= '',row.names=F,align='l', format.args = list(big.mark = ","))%>%
kableExtra::kable_styling(full_width = FALSE)
# kable(full_population, caption= '',row.names=F,align='l')%>%
#   kableExtra::kable_styling(full_width = FALSE)
}
LE <- as.data.frame(read.csv(file.path(multi_country_inputs_path,'IHME-GBD_2019_DATA-fd4ac82f-1.csv'),stringsAs = F))
x <- 2
x
?trace
;trace
!trace
.tracew
.trace
A <- 1:4
B <- c(1, 2, 3, 4)
is.vector(A)
is.vector(B)
dogs <- 5
cats <- 7
if (cats > dogs) {
print("bow-wow")
} else {
print("meow meow")
}
addtimes <- function (a, b) {
a + 2 * b
}
addtimes(a = 1, b = 2)
a = c(1,NA,2)
a
count(is.na(x))
count(is.na(a))
sum(is.na(a))
b = c(1,NA, 2,NA,NA)
b
sum(is.na(b))
pnorm(90, 100, 15)
T = 4(8) + 2
T = 4*8 + 2
T
T = (4*8) + 2
T
distance_in_km <- c(4500)
distance_in_km/time_in_hours
time_in_hours <- time_length(6,"hour")
distance_in_km/time_in_hours
distance_in_km <- c(4500)
time_in_hours <- time_length(6,"hour")
distance_in_km/time_in_hours
library(lubridate)
duration <- c("06:00")
d <- hm(duration)
time_length(d,"hour")
distance_in_km <- c(4500)
time_in_hours <- time_length(d,"hour")
distance_in_km/time_in_hours
mean(1,6,4,12,7,2,3)
mean(1,6,4,12,7,2,3)
setwd("~/DII_sourceCode/SystemA(R)/")
r = plumber::plumb("1_SetupAPI.R")
r$run(port=8567,swagger = TRUE)
getwd()
setwd("~/DII_sourceCode")
setwd("~/DII_sourceCode/SystemA/")
r = plumber::plumb("1_SetupAPI.R")
r$run(port=8567,swagger = TRUE)
getwd()
setwd("~/DII_sourceCode/SystemA/")
r = plumber::plumb("1_SetupAPI.R")
r$run(port=8567,swagger = TRUE)
getwd()
setwd("~/DII_sourceCode/SystemA/")
r = plumber::plumb("1_SetupAPI.R")
r$run(port=8567,swagger = TRUE)
getwd()
setwd("~/DII_sourceCode/SystemA/")
r = plumber::plumb("1_SetupAPI.R")
r$run(port=8567,swagger = TRUE)
getwd()
View(summaries)
setwd("~/DII_sourceCode/SystemA/")
r = plumber::plumb("1_SetupAPI.R")
r$run(port=8567,swagger = TRUE)
getwd()
setwd("~/DII_sourceCode/SystemA/")
r = plumber::plumb("1_SetupAPI.R")
r$run(port=8567,swagger = TRUE)
getwd()
